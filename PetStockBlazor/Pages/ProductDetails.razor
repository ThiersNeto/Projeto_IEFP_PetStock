@page "/product/{id:int}"
@using PetStockBlazor.Models
@using PetStockBlazor.Services
@inject FakeDataService DataService
@inject NavigationManager Navigation

<PageTitle>Detalhes do Produto</PageTitle>

<h3>Detalhes do Produto</h3>

@if (product != null)
{
    <div class="card">
        <img src="@product.ImageUrl" class="card-img-top" alt="@product.Name" style="max-width: 300px; height: auto;" />
        <div class="card-body">
            <h5 class="card-title">@product.Name</h5>
            <p class="card-text">@product.Description</p>
            <p><strong>Preço:</strong> R$ @product.Price</p>
            <p><strong>Estoque:</strong> @product.StockQuantity</p>

            <h5>Movimentações de Estoque</h5>
            <table class="table">
                <thead>
                    <tr>
                        <th>Data</th>
                        <th>Tipo</th>
                        <th>Quantidade</th>
                        <th>Descrição</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var movement in stockMovements)
                    {
                        <tr>
                            <td>@movement.Date.ToString("dd/MM/yyyy HH:mm")</td>
                            <td>@movement.Type</td>
                            <td>@movement.Quantity</td>
                            <td>@movement.Description</td>
                        </tr>
                    }
                </tbody>
            </table>

            <button @onclick="OpenStockMovementModal" class="btn btn-secondary">Registrar Movimentação de Estoque</button>
        </div>
    </div>

    <!-- Modal Customizado -->
    @if (isModalOpen)
    {
        <div class="modal-overlay" @onclick="CloseStockMovementModal">
            <div class="modal-container" @onclick:StopPropagation">
                <h5>Registrar Movimentação de Estoque</h5>
                <div class="form-group">
                    <label for="quantity">Quantidade</label>
                    <input id="quantity" type="number" @bind="movementQuantity" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="type">Tipo</label>
                    <select id="type" @bind="movementType" class="form-control">
                        <option value="Entrada">Entrada</option>
                        <option value="Saída">Saída</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="description">Descrição</label>
                    <input id="description" type="text" @bind="movementDescription" class="form-control" />
                </div>
                <button @onclick="RegisterStockMovement" class="btn btn-primary">
                    Registrar Movimentação
                    </button>
                <button @onclick="CloseStockMovementModal" class="btn btn-secondary">Fechar</button>
            </div>
        </div>
    }
}
else
{
    <h4>Produto não encontrado</h4>
}

@code {
    [Parameter] public int id { get; set; }
    private Product product;
    private List<StockMovement> stockMovements = new();
    private int movementQuantity;
    private string movementType = "Entrada";
    private string movementDescription;
    private bool isModalOpen = false;

    protected override void OnInitialized()
    {
        product = DataService.GetProducts().FirstOrDefault(p => p.Id == id);

        if (product != null)
        {
            stockMovements = DataService.GetStockMovementsForProduct(id);
        }
    }

    private void OpenStockMovementModal()
    {
        isModalOpen = true;
    }

    private void CloseStockMovementModal()
    {
        isModalOpen = false;
    }

    private void RegisterStockMovement()
    {
        if (id > 0 && movementQuantity > 0)
        {
            var movement = new StockMovement
                {
                    Type = movementType,
                    Description = movementDescription,
                    Quantity = movementQuantity,
                    Date = DateTime.Now
                };

            DataService.RegisterStockMovement(movement); // Agora passando um objeto correto
        }
    }

}

